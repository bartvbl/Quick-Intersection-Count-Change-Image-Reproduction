import os
import subprocess

from simple_term_menu import TerminalMenu

def run_command_line_command(command, working_directory='.'):
    print('>> Executing command:', command)
    subprocess.run(command, shell=True, check=False, cwd=working_directory)

def ask_for_confirmation(message):
    confirmation_menu = TerminalMenu(["yes", "no"], title=message)
    choice = confirmation_menu.show()
    return choice == 0

def downloadDatasetsMenu():
    download_menu = TerminalMenu([
        "Download SHREC 2017 3D shape dataset (7.3GB download, ~50GB extracted)",
        "Download experiment results generated by authors (~1.5GB download, ~12GB extracted)",
        "back"], title='------------------ Download Datasets ------------------')

    while True:
        choice = download_menu.show()
        os.makedirs('input/download/', exist_ok=True)

        if choice == 0:
            if not os.path.isfile('input/download/SHREC17.7z') or ask_for_confirmation('It appears the SHREC 2017 dataset has already been downloaded. Would you like to download it again?'):
                print('Downloading SHREC 2017 dataset..')
                run_command_line_command('wget --output-document SHREC17.7z https://data.mendeley.com/datasets/ysh8p862v2/1/files/607f79cd-74c9-4bfc-9bf1-6d75527ae516/SHREC17.7z?dl=1', 'input/download/')
            print()
            os.makedirs('input/SHREC17', exist_ok=True)
            run_command_line_command('p7zip -k -d download/SHREC17.7z', 'input/')
            print('Download and extraction complete. You may now delete the file input/download/SHREC17.7z if you need the disk space.')
            print()

        if choice == 1:
            print('Downloading author generated results')
            print()
            run_command_line_command('p7zip -k -d download/clutter_estimated_by_authors.7z', 'input/')

            run_command_line_command('p7zip -k -d download/results_computed_by_authors.7z', 'input/')
        if choice == 2:
            return

def installDependenciesMenu():
    install_menu = TerminalMenu([
        "Install all dependencies except CUDA",
        "Install CUDA (through APT)",
        "back"], title='---------------- Install Dependencies ----------------')

    while True:
        choice = install_menu.show()

        if choice == 0:
            run_command_line_command('sudo apt install cmake python3 python3-pip libpcl-dev g++-7 gcc-7 wget p7zip')
            run_command_line_command('sudo pip3 install console-menu xlwt numpy matplotlib pillow')
            print()
        if choice == 1:
            run_command_line_command('sudo apt install nvidia-cuda-toolkit nvidia-cuda-dev')
            print()
        if choice == 2:
            return

def compileProject():
    print('This project uses cmake for generating its makefiles.')
    print('It has a tendency to at times be unable to find an installed CUDA compiler.')
    print('Also, depending on which version of CUDA you have installed, you may need')
    print('to change the version of GCC/G++ used for compatibility reasons.')
    print('If either of these occurs, modify the paths at the top of the following file: ')
    print('    src/clutterbox/CMakeLists.txt')
    print()

    os.makedirs('src/clutterbox/build', exist_ok=True)

    compileProjectMenu = TerminalMenu([
        "Run cmake (must run before make)",
        "Run make",
        "back"], title='------------------- Compile Project -------------------')

    while True:
        choice = compileProjectMenu.show()

        if choice == 0:
            run_command_line_command('rm ./*', 'src/clutterbox/build')
            run_command_line_command('cmake ..', 'src/clutterbox/build')
        if choice == 1:
            run_command_line_command('make -j 4', 'src/clutterbox/build')
        if choice == 2:
            return

activeDescriptors = ['rici', 'si', '3dsc']
activeObjectCounts = ['1', '5', '10']
spinImageSupportAngle = 180
gpuID = 0





def executeClutterboxExperiment():
    run_command_line_command('clutterbox '
                             '--box-size=1 '
                             '--source-directory=../../../input/SHREC17/ '
                             '--object-counts=' + ','.join(activeObjectCounts) + ' '
                             '--override-total-object-count=10 '
                             '--descriptors=' + ','.join(activeDescriptors) + ' '
                             '--support-radius=0.3 '
                             '--force-gpu=' + str(gpuID) + ' '
                             '--force-seed=0 '
                             '--spin-image-support-angle-degrees=' + str(spinImageSupportAngle) + ' '
                             '--3dsc-min-support-radius=0.048 '
                             '--3dsc-point-density-radius=0.096 '
                             '--dump-raw-search-results')

def configureActiveDescriptors():
    while True:
        run_menu = TerminalMenu([
            "Generate results for Radial Intersection Count Image: " + ("enabled" if "rici" in activeDescriptors else "disabled"),
            "Generate results for Spin Image: " + ("enabled" if "si" in activeDescriptors else "disabled"),
            "Generate results for 3D Shape Context: " + ("enabled" if "3dsc" in activeDescriptors else "disabled"),
            "done"], title='-- Configure descriptors to be tested --')
        choice = run_menu.show()
        if choice == 0:
            if "rici" in activeDescriptors:
                activeDescriptors.remove("rici")
            else:
                activeDescriptors.append("rici")
        if choice == 1:
            if "si" in activeDescriptors:
                activeDescriptors.remove("si")
            else:
                activeDescriptors.append("si")
        if choice == 2:
            if "3dsc" in activeDescriptors:
                activeDescriptors.remove("3dsc")
            else:
                activeDescriptors.append("3dsc")
        if choice == 3:
            return

def configureActiveObjectCounts():
    while True:
        run_menu = TerminalMenu([
            "Generate results for scene with 1 uncluttered object: " + ("enabled" if "1" in activeObjectCounts else "disabled"),
            "Generate results for scene with 4 added clutter objects: " + ("enabled" if "5" in activeObjectCounts else "disabled"),
            "Generate results for scene with 9 added clutter objects: " + ("enabled" if "10" in activeObjectCounts else "disabled"),
            "done"], title='-- Configure object counts to be tested --')
        choice = run_menu.show()
        if choice == 0:
            if "1" in activeObjectCounts:
                activeObjectCounts.remove("1")
            else:
                activeObjectCounts.append("1")
        if choice == 1:
            if "5" in activeObjectCounts:
                activeObjectCounts.remove("5")
            else:
                activeObjectCounts.append("5")
        if choice == 2:
            if "10" in activeObjectCounts:
                activeObjectCounts.remove("10")
            else:
                activeObjectCounts.append("10")
        if choice == 3:
            activeObjectCounts.sort()
            return

def configureSpinImageAngle():
    global spinImageSupportAngle
    spinangle_menu = TerminalMenu([
        "Set spin image support angle to 180 degrees (used for most charts)",
        "Set spin image support angle to 60 degrees (used for Figure 11)"],
        title='-- Configure spin image support angle to use during testing --')
    choice = spinangle_menu.show()
    if choice == 0:
        spinImageSupportAngle = 180
    if choice == 1:
        spinImageSupportAngle = 60



def runClutterbox():
    while True:
        run_menu = TerminalMenu([
            "Run seed drawn from seed list at random",
            "Run seed with specific index in seed list",
            "Run manually entered seed",
            "Configure descriptors to test (currently active: " + ', '.join(activeDescriptors) + ")",
            "Configure object counts (currently active: " + ', '.join(activeObjectCounts) + ")",
            "Configure Spin Image support angle (currently set to " + str(spinImageSupportAngle) + ")",
            "Configure GPU (use if system has more than one, currently set to GPU " + str(gpuID) + ")",
            "back"], title='------------ Run Clutterbox Experiment -----------')
        choice = run_menu.show()

        if choice == 0:
            executeClutterboxExperiment()
            print()
        if choice == 1:
            executeClutterboxExperiment()
            print()
        if choice == 2:
            executeClutterboxExperiment()
            print()
        if choice == 3:
            configureActiveDescriptors()
            print()
        if choice == 4:
            configureActiveObjectCounts()
            print()
        if choice == 5:
            configureSpinImageAngle()
            print()
        if choice == 7:
            return

def runProjectionBenchmark():
    if ask_for_confirmation('This benchmark will consume around 30GB of RAM. You should close any applications to ensure you do not run out. Continue?'):
        print()
        print('Compiling..')
        os.makedirs('src/clutterbox/build', exist_ok=True)
        run_command_line_command('g++ -O3 -I ../lib/eigen/eigen3/ ../tools/projectionBenchmark/compare.cpp -o benchmark', 'src/clutterbox/build')
        print()
        print('Compilation complete, running benchmark..')
        print()
        run_command_line_command('benchmark', 'src/clutterbox/build')

def runMainMenu():
    main_menu = TerminalMenu([
        "1. Install dependencies",
        "2. Download datasets",
        "3. Compile project",
        "4. Run Clutterbox experiment",
        "5. Run clutter fraction estimation",
        "6. Compile author generated results into spreadsheets",
        "7. Run projection algorithm benchmark (Table 1)",
        "8. exit"], title='---------------------- Main Menu ----------------------')

    while True:
        choice = main_menu.show()

        if choice == 0:
            installDependenciesMenu()
        if choice == 1:
            downloadDatasetsMenu()
        if choice == 2:
            compileProject()
        if choice == 3:
            runClutterbox()
        if choice == 6:
            runProjectionBenchmark()
        if choice == 7:
            return

def runIntroSequence():
    print()
    print('Greetings!')
    print()
    print('This script is intended to reproduce various figures in an interactive')
    print('(and hopefully convenient) manner.')
    print()
    print('However, a set of bash scripts is provided in the "scriptsrc" folder')
    print('that will allow you to circumvent parts of this script, if desired.')
    print()
    runMainMenu()


if __name__ == "__main__":
    runIntroSequence()